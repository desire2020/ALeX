
print_al:                  ;   def print_al(number in $al, ref pos in $ebx)
push    ecx
push    edx
push    edi

mov     edi, ebx

mov     ah, 0Fh
mov     dl, al
shr     al, 4
mov     ecx, 2

.begin:
    and     al, 01111b
    cmp     al, 9
    ja      .1
    add     al, '0'
    jmp     .2
.1:
    sub     al, 0Ah
    add     al, 'A'
.2:
    mov     [gs:edi], ax
    add     edi, 2

mov     al, dl
loop    .begin

mov     ebx, edi

pop     edi
pop     edx
pop     ecx

ret

print_int:
mov     eax, [esp + 4]
shr     eax, 24
call    print_al

mov     eax, [esp + 4]
shr     eax, 16
call    print_al

mov     eax, [esp + 4]
shr     eax, 8
call    print_al

mov     eax, [esp + 4]
call    print_al

mov     ah, 07h
mov     al, 'h'
push    edi
mov     edi, ebx
mov     [gs:edi], ax
add     edi, 4
mov     ebx, edi
pop     edi

ret

print:
push    ebp
mov     ebp, esp
push    ecx
push    esi
push    edi

mov     esi, [ebp + 8]
mov     edi, ebx
mov     ah, 0Fh
.1:
    lodsb
    test    al, al
    jz      .2
    cmp     al, 0Ah
    jnz     .3
    push    eax
    mov     eax, edi
    mov     cl, 160
    div     cl
    and     eax, 0FFh
    inc     eax
    mov     cl, 160
    mul     cl
    mov     edi, eax
    pop     eax
    jmp     .1
.3:
    mov     [gs:edi], ax
    add     edi, 2
    jmp     .1
.2:
    mov     ebx, edi

pop     edi
pop     esi
pop     ecx
pop     ebp
ret

println:
push    ecx
push    eax
mov     eax, ebx
mov     cl, 160
div     cl
and     eax, 0FFh
inc     eax
mov     cl, 160
mul     cl
mov     ebx, eax
pop     eax
pop     ecx
ret

memcpy:
push    ebp
mov     ebp, esp

push    esi
push    edi
push    ecx

mov     edi, [ebp + 8]
mov     esi, [ebp + 12]
mov     ecx, [ebp + 16]

.1:
    cmp     ecx, 0
    jz      .2

    mov     al, [ds:esi]
    inc     esi

    mov     byte[es:edi], al
    inc     edi

    dec     ecx
    jmp     .1

.2:
    mov     eax, [ebp + 8]

pop     ecx
pop     edi
pop     esi
mov     esp, ebp
pop     ebp

ret